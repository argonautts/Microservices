version: '3'

services:

  # caddy:
  #   image: argoonaut/caddy
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.hostname == docker-desktop
  #   volumes:
  #     - caddy_data:/data
  #     - caddy_config:/config
  #   ports:
  #     - "80:80"
  #     - "444:443"

  front-end:
    image: argoonaut/front-end
    deploy:
      mode: replicated
      replicas: 1

  # broker-service - основная точка входа; мы вызываем ее из front-end
  broker-service:
    image: argoonaut/broker:1.0.0
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1

  # listener-service - следит за сообщениями в rabbitmq
  listener-service:
    image: argoonaut/listener:1.0.0
    deploy:
      mode: replicated
      replicas: 2

  # authentication-service - обрабатывает авторизацию пользователей
  authentication-service:
    image: argoonaut/authentication:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  # logger-service: сервис для хранения логгов
  logger-service:
    image: argoonaut/logger:1.0.0
    ports:
      - "8082:80"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./logger-service/templates/:/app/templates

  # mail-service - обрабатывает отправку почты
  mail-service:
    image: argoonaut/mail:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "Alexander Kozin"
      FROM_ADDRESS: alexander.kozinn@gmail.com

  # rabbitmq: сервер rabbitmq
  rabbitmq:
    image: 'rabbitmq:3-management'
    deploy:
      mode: global
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/

  # mailhog: поддельный smtp-сервер с веб-интерфейсом
  # mailhog:
  #   image: 'mailhog/mailhog:latest'
  #   ports:
  #     - "8025:8025"
  #   deploy:
  #     mode: global

  # mongo: запускает MongoDB
  mongo:
    image: 'mongo:4.2.17-bionic'
    ports:
      - "27017:27017"
    deploy:
      mode: global
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  # postgres: запускает Postgres
  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    deploy:
      mode: global
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  # etcd: запуск сервера etcd
  # etcd:
  #   image: docker.io/bitnami/etcd:3
  #   environment:
  #     - ALLOW_NONE_AUTHENTICATION=yes
  #   deploy:
  #     mode: global
  #   volumes:
  #     - ./db-data/etcd/:/bitnami/etcd

volumes:
  caddy_data:
    external: true
  caddy_config: